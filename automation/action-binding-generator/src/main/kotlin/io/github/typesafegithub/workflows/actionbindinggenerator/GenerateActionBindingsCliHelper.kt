package io.github.typesafegithub.workflows.actionbindinggenerator

import java.io.File
import kotlin.io.path.Path

/**
 * Implements the suggested logic of a script that is called to regenerate action bindings.
 *
 * @param args Whatever was passed to the script. The exact inputs are opaque and for now are an implementation detail
 * of the library, i.e. whatever YAML was generated by the library, it will produce correct input to the script and thus
 * this function.
 */
public fun generateActionBindings(args: Array<String>) {
    val workflowYamlFileName: String? =
        when {
            args.isEmpty() -> null
            args.size == 1 -> args[0]
            else -> error("At most one argument is supported!")
        }

    val allUsedActions =
        extractUsedActionsFromWorkflow(
            manifest = File(".github/workflows/_used-actions.yaml").readText(),
        )

    val actionsToGenerateBindingsFor =
        workflowYamlFileName?.let {
            val actionsUsedInRequestedWorkflow =
                extractUsedActionsFromWorkflow(
                    manifest = File(".github/workflows/$workflowYamlFileName").readText(),
                )
            allUsedActions.intersect(actionsUsedInRequestedWorkflow.toSet())
        } ?: allUsedActions

    actionsToGenerateBindingsFor.forEach { action ->
        Path(".github").resolve("workflows").resolve("generated").resolve(action.owner).resolve("${action.name}.kt").let {
            it.parent.toFile().mkdirs()
            val binding =
                action.generateBinding(
                    metadataRevision = NewestForVersion,
                    generateForScript = true,
                )
            it.toFile().writeText(binding.kotlinCode)
        }
    }
}
